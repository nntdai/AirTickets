/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import DTO.SanBayDTO;
import BLL.SanBayBLL;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
/**
 *
 * @author User
 */
public class SanBay_Panel extends javax.swing.JPanel {
    DefaultTableModel model;
    SanBayBLL sb_bll=new SanBayBLL();
    Vector<SanBayDTO> list;
    /**
     * Creates new form SanBay_Panel
     */
    public SanBay_Panel(){
       
        initComponents();
        try {
            list=new Vector<>(sb_bll.getstatus(true));
        } catch (SQLException ex) {
            Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadlist(list);
    }
    public void loadlist(Vector<SanBayDTO> list){
        model=(DefaultTableModel) sb_tb.getModel(); 
        model.setRowCount(0);
        for(SanBayDTO obj : list){
            String maSanBay=obj.getMaSanBay();
            String ten=obj.getTen();
            Boolean status=obj.isStatus();
            if(!status){
                Object[] row={maSanBay, ten, "Không khả dụng"};
                model.addRow(row);
            }else{
                Object[] row={maSanBay, ten, "Khả dụng"};
                model.addRow(row);
            }
        }
    }
    public boolean isNumeric(String vitri) {
        for (int i = 0; i < vitri.length(); i++) {
            if (Character.isDigit(vitri.charAt(i))) {
                return true;
            }
        }
        return false;
    }
    public boolean TonTai_Ma(String ma){
        for(SanBayDTO obj : list){
            if(ma.equals(obj.getMaSanBay())){
                return true;
            }
        }
        return false;
    }
    public boolean TonTai_vitri(String vitri){
        for(SanBayDTO obj : list){
            if(vitri.equalsIgnoreCase(obj.getTen())){
                return true;
            }
        }
        return false;
    }
    public boolean check_add_data(String ma, String vitri){
        if(!ma.isEmpty()){
            boolean check=ma.equals(ma.toUpperCase());
            if(!check || ma.length()!=3){
                JOptionPane.showMessageDialog(null, "Mã không hợp lệ !");
                return false;
            }
            if(TonTai_Ma(ma)){
                JOptionPane.showMessageDialog(null, "Mã đã tồn tại !");
                return false;
            }
        }else{
            JOptionPane.showMessageDialog(null, "Mã không được để trống !");
            return false;
        }
        if(!vitri.isEmpty()){
            if(isNumeric(vitri)){
                JOptionPane.showMessageDialog(null, "Vị trí không hợp lệ !");
                return false;
            }
            if(TonTai_vitri(vitri)){
                JOptionPane.showMessageDialog(null, "Vị trí đã tồn tại !");
                return false;
            }
        }else{
            JOptionPane.showMessageDialog(null, "Vị trí không được để trống !");
            return false;
        }
        return true;
    }
    public boolean check_update_data(String vitri){
        if(!vitri.isEmpty()){
            if(isNumeric(vitri)){
                JOptionPane.showMessageDialog(null, "Vị trí không hợp lệ !");
                return false;
            }
            if(TonTai_vitri(vitri)){
                JOptionPane.showMessageDialog(null, "Vị trí đã tồn tại !");
                return false;
            }
        }else{
            JOptionPane.showMessageDialog(null, "Vị trí không được để trống !");
            return false;
        }
        return true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Loc_cb = new javax.swing.JComboBox<>();
        search_tf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sb_tb = new javax.swing.JTable();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        add_sb = new javax.swing.JButton();

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã máy bay", "Tên máy bay" }));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Danh sách sân bay");

        jButton2.setBackground(new java.awt.Color(0, 153, 255));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 153, 255));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Loc_cb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Loc_cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã sân bay", "Vị trí" }));

        search_tf.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        search_tf.setText("Nhập vào đây dữ liệu cần tìm");
        search_tf.setBorder(null);
        search_tf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                search_tfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                search_tfFocusLost(evt);
            }
        });
        search_tf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_tfActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Tìm kiếm :");

        sb_tb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sb_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Mã sân bay", "Vị trí", "Tình trạng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sb_tb.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sb_tb.getTableHeader().setReorderingAllowed(false);
        sb_tb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sb_tbMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sb_tb);
        if (sb_tb.getColumnModel().getColumnCount() > 0) {
            sb_tb.getColumnModel().getColumn(0).setResizable(false);
            sb_tb.getColumnModel().getColumn(1).setResizable(false);
            sb_tb.getColumnModel().getColumn(2).setResizable(false);
        }

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Khả dụng");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jRadioButton2.setText("Không khả dụng");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        add_sb.setBackground(new java.awt.Color(0, 153, 255));
        add_sb.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        add_sb.setForeground(new java.awt.Color(255, 255, 255));
        add_sb.setText("+ Thêm sân bay");
        add_sb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_sbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Loc_cb, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(add_sb, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(search_tf, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Loc_cb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add_sb, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Download_Dialog dl=new Download_Dialog(null, true); 
            int rs=dl.getpath().showSaveDialog(null);
            Vector<SanBayDTO> l=new Vector<SanBayDTO>(sb_bll.getAll());
            Workbook wb=new XSSFWorkbook();
            Sheet sheet = wb.createSheet("SanBay");
            Row row = sheet.createRow(0);
            Cell cell =row.createCell(0);
            cell.setCellValue("Mã sân bay");

            cell=row.createCell(1);
            cell.setCellValue("Tên");

            cell=row.createCell(2);
            cell.setCellValue("Trạng thái");
            
            int i=0;
            for(SanBayDTO obj : l){
                i++;
                row=sheet.createRow(0+i);
                cell=row.createCell(0);
                cell.setCellValue(obj.getMaSanBay());
                
                cell=row.createCell(1);
                cell.setCellValue(obj.getTen());
                
                cell=row.createCell(2);
                if(obj.isStatus()){
                    cell.setCellValue("Khả dụng");
                }else{
                    cell.setCellValue("Không khả dụng");
                }
            }
            if(rs==JFileChooser.APPROVE_OPTION){
                File f = dl.getpath().getSelectedFile();
                try {
                    FileOutputStream fis = new FileOutputStream(f+".xlsx");
                    wb.write(fis);
                    fis.close();
                    JOptionPane.showMessageDialog(null, "Xuất file thành công !");
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        try {
            list=new Vector<>(sb_bll.getstatus(true));
        } catch (SQLException ex) {
            Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadlist(list);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        try {
            list=new Vector<>(sb_bll.getstatus(false));
        } catch (SQLException ex) {
            Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadlist(list);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void add_sbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_sbActionPerformed
        ThemSanBay_Dialog dg=new ThemSanBay_Dialog(null, true);
        dg.setLocationRelativeTo(null);
        dg.getbtn_add().addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                if(check_add_data(dg.getma(), dg.getvitri())){
                    SanBayDTO sb=new SanBayDTO(dg.getma(), dg.getvitri(), true);
                    try {
                        if(!sb_bll.addSanBay(sb)){
                            JOptionPane.showMessageDialog(null, "Mã sân bay đã tồn tại trong hệ thống !");
                        }else{
                            JOptionPane.showMessageDialog(null, "Thêm sân bay thành công !");
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(ThemSanBay_Dialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    dg.setVisible(false);
                    try {
                        list=new Vector<>(sb_bll.getstatus(true));
                    } catch (SQLException ex) {
                        Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    loadlist(list);
                }
            }
        });
        dg.getbtn_refresh().addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                int ques=JOptionPane.showConfirmDialog(null, "Bạn chắc muốn xóa trắng các trường chứ ?","Question",JOptionPane.YES_NO_OPTION);
                if(ques==JOptionPane.YES_OPTION){
                    dg.getmsb_tf().setText("");
                    dg.getvt_tf().setText("");
                }
            }
        });
        dg.setVisible(true);
    }//GEN-LAST:event_add_sbActionPerformed

    private void sb_tbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sb_tbMouseClicked
        int row=sb_tb.getSelectedRow();
        if(evt.getClickCount()==2){
            if(row>=0){
                if(jRadioButton1.isSelected()){
                    ChiTietSanBay_Dialog ctsb=new ChiTietSanBay_Dialog(null, true);
                    ctsb.setLocationRelativeTo(null);
                    ctsb.getmsb_lb().setText(model.getValueAt(row, 0).toString());
                    ctsb.getvt_tf().setText(model.getValueAt(row, 1).toString());
                    ctsb.getstt_lb().setText(model.getValueAt(row, 2).toString());
                    ctsb.getCapNhat_btn().addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            if(check_update_data(ctsb.getvt_tf().getText())){
                                SanBayDTO sb=new SanBayDTO(ctsb.getmsb_lb().getText(), ctsb.getvt_tf().getText(), true);
                                try {
                                    sb_bll.updateSanBay(sb);
                                } catch (SQLException ex) {
                                    Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                JOptionPane.showMessageDialog(null, "Cập nhật sân bay thành công !");
                                ctsb.setVisible(false);
                                try {
                                    list=new Vector<>(sb_bll.getstatus(true));
                                } catch (SQLException ex) {
                                    Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                loadlist(list);
                            }
                        } 
                    });
                    ctsb.getdelete_btn().addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            SanBayDTO sb=new SanBayDTO(ctsb.getmsb_lb().getText(), ctsb.getvt_tf().getText(), true);
                            try {
                                if(sb_bll.checkid(ctsb.getmsb_lb().getText())){
                                    int ques=JOptionPane.showConfirmDialog(null, "Bạn chắc muốn xóa sân bay này chứ ?","Question",JOptionPane.YES_NO_OPTION);
                                    if(ques==JOptionPane.YES_OPTION){
                                        try {
                                            sb_bll.deleteSanBay(sb);
                                        } catch (SQLException ex) {
                                            Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        JOptionPane.showMessageDialog(null, "Xóa sân bay thành công !");
                                        ctsb.setVisible(false);
                                        try {
                                            list=new Vector<>(sb_bll.getstatus(true));
                                        } catch (SQLException ex) {
                                            Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        loadlist(list);
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "Mã sân bay này đang có chuyến bay áp dụng, không xóa được !");
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                        }
                    });
                    ctsb.setVisible(true);
                }
                if(jRadioButton2.isSelected()){
                    ChiTietSanBay_DaXoa_Dialog ctdxsb=new ChiTietSanBay_DaXoa_Dialog(null, true);
                    ctdxsb.setLocationRelativeTo(null);
                    ctdxsb.getmsb_lb().setText(model.getValueAt(row, 0).toString());
                    ctdxsb.getvt_lb().setText(model.getValueAt(row, 1).toString());
                    ctdxsb.getstt_lb().setText(model.getValueAt(row, 2).toString());
                    ctdxsb.getagree_btn().addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            ctdxsb.setVisible(false);
                        }
                    });
                    ctdxsb.setVisible(true);
                }
//                System.out.println("Co click dong "+row);
//                ChiTietSanBay_Dialog ctsb=new ChiTietSanBay_Dialog(null, true);
//                ctsb.getmsb_lb().setText(model.getValueAt(row, 0).toString());
//                ctsb.getvt_tf().setText(model.getValueAt(row, 1).toString());
//                ctsb.getstt_lb().setText(model.getValueAt(row, 2).toString());
//                ctsb.getCapNhat_btn().addActionListener(new ActionListener(){
//                    @Override
//                    public void actionPerformed(ActionEvent e) {
//                        if(check_update_data(ctsb.getvt_tf().getText())){
//                            SanBayDTO sb=new SanBayDTO(ctsb.getmsb_lb().getText(), ctsb.getvt_tf().getText(), true);
//                            try {
//                                sb_bll.updateSanBay(sb);
//                            } catch (SQLException ex) {
//                                Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            JOptionPane.showMessageDialog(null, "Cập nhật sân bay thành công !");
//                            ctsb.setVisible(false);
//                            try {
//                                list=new Vector<>(sb_bll.getstatus(true));
//                            } catch (SQLException ex) {
//                                Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            loadlist(list);
//                        }
//                    } 
//                });
//                ctsb.getdelete_btn().addActionListener(new ActionListener(){
//                    @Override
//                    public void actionPerformed(ActionEvent e) {
//                        SanBayDTO sb=new SanBayDTO(ctsb.getmsb_lb().getText(), ctsb.getvt_tf().getText(), true);
//                        int ques=JOptionPane.showConfirmDialog(null, "Bạn chắc muốn xóa sân bay này chứ ?","Question",JOptionPane.YES_NO_OPTION);
//                        if(ques==JOptionPane.YES_OPTION){
//                            try {
//                                sb_bll.deleteSanBay(sb);
//                            } catch (SQLException ex) {
//                                Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            JOptionPane.showMessageDialog(null, "Xóa sân bay thành công !");
//                            ctsb.setVisible(false);
//                            try {
//                                list=new Vector<>(sb_bll.getstatus(true));
//                            } catch (SQLException ex) {
//                                Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            loadlist(list);
//                        }
//                    }
//                });
            }
        }
    }//GEN-LAST:event_sb_tbMouseClicked

    private void search_tfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_tfActionPerformed
        int status=0;
        if(jRadioButton1.isSelected()){
            status=1;
        }
        if(Loc_cb.getSelectedIndex()==0){
            try {
                list=new Vector<SanBayDTO>(sb_bll.getid(search_tf.getText(), status));
            } catch (SQLException ex) {
                Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            loadlist(list);
        }
        if(Loc_cb.getSelectedIndex()==1){
            try {
                list=new Vector<SanBayDTO>(sb_bll.getvitri(search_tf.getText(), status));
            } catch (SQLException ex) {
                Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            loadlist(list);
        }
    }//GEN-LAST:event_search_tfActionPerformed

    private void search_tfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_search_tfFocusLost
        search_tf.setText("Nhập vào đây dữ liệu cần tìm");
    }//GEN-LAST:event_search_tfFocusLost

    private void search_tfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_search_tfFocusGained
        search_tf.setText("");
    }//GEN-LAST:event_search_tfFocusGained

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Vector<SanBayDTO> l;
        try {
            l = new Vector<SanBayDTO>(sb_bll.getAll());
            PrinterJob printerJob = PrinterJob.getPrinterJob();
            // Chọn máy in
            if (printerJob.printDialog()) {
                // Chuẩn bị nội dung cần in
                Printable printable = new Printable() {
                    @Override
                    public int print(Graphics g, PageFormat pf, int pageIndex) throws PrinterException {
                        if (pageIndex > 0) {
                            return Printable.NO_SUCH_PAGE;
                        }
                        Graphics2D g2d = (Graphics2D) g;
                        g2d.drawString("Danh sách sân bay", 50, 50);
                        g2d.drawRect(50, 60, 150, 30);
                        g2d.drawString("Mã sân bay", 70, 80);
                        g2d.drawRect(50+150, 60, 150, 30);
                        g2d.drawString("Tên", 220, 80);
                        g2d.drawRect(50+300, 60, 150, 30);
                        g2d.drawString("Trạng thái", 370, 80);
//                        g2d.translate(pf.getImageableX(), pf.getImageableY());


                        int cellWidth = 150;
                        int cellHeight = 30;
                        int tablecellWidth = 50;
                        int tablecellHeight = 60;

                        int i=80;
                        int j=30;
                        // Vẽ các dòng của bảng
                        for (SanBayDTO obj:l) {
                            g2d.drawRect(tablecellWidth, tablecellHeight+j, 150, 30);
                            g2d.drawString(obj.getMaSanBay(), 70, (i + cellHeight));
                            g2d.drawRect(tablecellWidth+150*1, tablecellHeight+j, 150, 30);
                            g2d.drawString(obj.getTen(), 220, i + cellHeight);
                            g2d.drawRect(tablecellWidth+150*2, tablecellHeight+j, 150, 30);
                            if(obj.isStatus()){
                                g2d.drawString("Khả dụng", 370, i + cellHeight);
                            }else{
                                g2d.drawString("Không khả dụng",370, i + cellHeight);
                            }
                            i=i+30;
                            j=j+30;
                        }
                        return Printable.PAGE_EXISTS;
                    }
                };

                // Gọi phương thức print để in
                try {
                    printerJob.setPrintable(printable);
                    printerJob.print();
                } catch (PrinterException ex) {
                    ex.printStackTrace();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(SanBay_Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Loc_cb;
    private javax.swing.JButton add_sb;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable sb_tb;
    private javax.swing.JTextField search_tf;
    // End of variables declaration//GEN-END:variables
}
